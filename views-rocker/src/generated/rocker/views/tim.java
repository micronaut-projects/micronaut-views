package views;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;

/*
 * Auto generated code to render template views/tim.rocker.html
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class tim extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.HTML; }
    static public String getTemplateName() { return "tim.rocker.html"; }
    static public String getTemplatePackageName() { return "views"; }
    static public String getHeaderHash() { return "1906003686"; }
    static public long getModifiedAt() { return 1692200354855L; }
    static public String[] getArgumentNames() { return new String[] { "username" }; }

    // argument @ [1:2]
    private String username;

    public tim username(String username) {
        this.username = username;
        return this;
    }

    public String username() {
        return this.username;
    }

    static public tim template(String username) {
        return new tim()
            .username(username);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // username: <span>
        static private final byte[] PLAIN_TEXT_0_0;
        // </span>
        static private final byte[] PLAIN_TEXT_1_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(tim.class.getClassLoader(), tim.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
        }

        // argument @ [1:2]
        protected final String username;

        public Template(tim model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.username = model.username();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [1:24]
            __internal.aboutToExecutePosInTemplate(1, 24);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [2:17]
            __internal.aboutToExecutePosInTemplate(2, 17);
            __internal.renderValue(username, false);
            // PlainText @ [2:26]
            __internal.aboutToExecutePosInTemplate(2, 26);
            __internal.writeValue(PLAIN_TEXT_1_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "username: <span>";
        static private final String PLAIN_TEXT_1_0 = "</span>";

    }

}
